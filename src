package calculator;

import java.math.BigInteger;
import java.util.*;

public class Main {
    public static Deque<String> toPostfix(String[] expressionArray) {
        Deque<String> stack = new ArrayDeque<>();
        Deque<String> result = new ArrayDeque<>();

        for (String temp : expressionArray) {
            if (temp.matches("\\w+")) { //add digit/letter to result
                result.offerLast(temp);
            } else if (temp.equals("(")) { //push "(" to the stack
                stack.offerFirst(temp);
            } else if (temp.equals(")")) { //pop all to the result untill "(" is found
                while (stack.peekFirst() != null && !stack.peekFirst().equals("(")) {
                    result.offerLast(stack.pollFirst());
                }
                stack.removeFirst(); //remove "(" from stack
            } else if (temp.matches("[+\\-/*]")) { //if operator found
                if (stack.peekFirst() == null || (temp.matches("[*/]") && stack.peekFirst().matches("[+\\-]"))
                        || stack.peekFirst().equals("(")) {
                    stack.offerFirst(temp);
                } else {
                    if (temp.matches("[+\\-]")) {
                        while (!stack.peekFirst().matches("[()]") || stack.peekFirst().matches("[+\\-/*]")) {
                            result.offerLast(stack.pollFirst());
                            if (stack.isEmpty()) {
                                break;
                            }
                        }
                        stack.offerFirst(temp);
                    } else if (temp.matches("[*/]")) {
                        while (stack.peekFirst().matches("[*/]")) {
                            result.offerLast(stack.pollFirst());
                            if (stack.isEmpty()) {
                                break;
                            }
                        }
                        stack.offerFirst(temp);
                    }
                }
            }
        }
        while (!stack.isEmpty()) {
            result.offerLast(stack.pollFirst());
        }
        return result;
    }

    private static void printError(int type) {
        switch (type) {
            case 1:
                System.out.println("Unknown command");
                break;
            case 2:
                System.out.println("Invalid expression");
                break;
            case 3:
                System.out.println("Invalid assignment");
                break;
            case 4:
                System.out.println("Invalid identifier");
                break;
            case 5:
                System.out.println("Unknown variable");
                break;
        }
    }

    private static boolean check(String[] array) {
        if (array.length > 2) {
            printError(3);
            return false;
        } else if (!array[0].matches("[a-zA-Z]*+")) {
            printError(4);
            return false;
        } else {
            return true;
        }
    }

    private static String formatInput(String input) {
        String result = input.replaceAll("(--)+|\\++", "+")
                .replaceAll("(---)+|\\+-|-\\+|-", "-")
                .replaceAll("\\+", " + ")
                .replaceAll("-", " - ")
                .replaceAll("\\*", " * ")
                .replaceAll("/", " / ")
                .replaceAll("\\)", " ) ")
                .replaceAll("\\(", " ( ")
                .replaceAll("\\s+", " ");
        return result.trim();
    }

    private static Map<String, String> createMap(Map<String, String> map, String[] input) {
        if (map.containsKey(input[1])) {
            map.put(input[0], map.get(input[1]));
        } else if (input[1].matches("\\d+")) {
            map.put(input[0], input[1]);
        } else {
            printError(3);
        }
        return map;
    }

    private static void calculateResult(Deque<String> postfix, Map<String, String> map) {
        Deque<BigInteger> resultStack = new ArrayDeque<>();
        boolean showResult = true;

        if (postfix.contains("(") || postfix.contains(")")) {
            printError(2);
            showResult = false;
        } else {
            for (String s : postfix) {
                if (s.matches("\\d+")) {
                    resultStack.offerFirst(new BigInteger(s));
                } else if (s.matches("\\w+")) {
                    if (!map.containsKey(s)) {
                        printError(5);
                        showResult = false;
                    } else {
                        resultStack.offerFirst(new BigInteger(map.get(s)));
                    }
                } else if (s.matches("[+\\-/*]")) {
                    BigInteger tempResult;
                    switch (s) {
                        case "*":
                            tempResult = resultStack.pop().multiply(resultStack.pop());
                            resultStack.offerFirst(tempResult);
                            break;
                        case "/":
                            BigInteger first = resultStack.pop();
                            BigInteger second = resultStack.pop();
                            tempResult = second.divide(first);
                            resultStack.offerFirst(tempResult);
                            break;
                        case "+":
                            tempResult = resultStack.pop().add(resultStack.pop());
                            resultStack.offerFirst(tempResult);
                            break;
                        case "-":
                            tempResult = resultStack.pop().subtract(resultStack.pop());
                            resultStack.offerFirst(tempResult.negate());
                            break;
                    }
                }
            }
        }
        if (showResult) {
            System.out.println(resultStack.peekFirst());
        }
    }

    private static void endProgram() {
        System.out.println("Bye!");
        System.exit(0);
    }

    private static void getHelp() {
        System.out.println("The program supports addition, substraction, multiplication, division with parentheses");
    }

    public static void main(String[] args) {
        final Scanner scanner = new Scanner(System.in);
        Map<String, String> map = new HashMap<>();

        while (true) {
            String userInput = scanner.nextLine();
            String formatedUserInput = formatInput(userInput);
            if (userInput.isBlank()) {
                continue;
            }
            if (userInput.matches("[+\\-*/]\\d+")) {
                System.out.println(userInput);
                continue;
            }

            switch (userInput) {
                case "/exit":
                    endProgram();
                    break;
                case "/help":
                    getHelp();
                    break;
                default:
                    if (formatedUserInput.matches("^/.+")) {
                        printError(1);
                    } else if (formatedUserInput.contains("=")) {
                        String[] inputArray = formatedUserInput.replaceAll("\\s+", "").split("=");
                        if (check(inputArray)) {
                            createMap(map, inputArray);
                        }
                    } else {
                        try {
                            calculateResult(toPostfix(formatedUserInput.split(" ")), map);
                        } catch (Exception e) {
                            printError(2);
                        }
                    }
            }
        }
    }
}



